// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: tour_service.proto

package tour

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TourService_FindTour_FullMethodName           = "/TourService/FindTour"
	TourService_FindTourByAuthorId_FullMethodName = "/TourService/FindTourByAuthorId"
	TourService_CreateTour_FullMethodName         = "/TourService/CreateTour"
	TourService_UpdateTour_FullMethodName         = "/TourService/UpdateTour"
	TourService_PublishTour_FullMethodName        = "/TourService/PublishTour"
	TourService_ArchiveTour_FullMethodName        = "/TourService/ArchiveTour"
)

// TourServiceClient is the client API for TourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourServiceClient interface {
	FindTour(ctx context.Context, in *FindTourRequest, opts ...grpc.CallOption) (*TourDto, error)
	FindTourByAuthorId(ctx context.Context, in *FindByAuthorIdRequest, opts ...grpc.CallOption) (*FindByAuthorIdResponse, error)
	CreateTour(ctx context.Context, in *TourDto, opts ...grpc.CallOption) (*TourDto, error)
	UpdateTour(ctx context.Context, in *TourDto, opts ...grpc.CallOption) (*TourDto, error)
	PublishTour(ctx context.Context, in *PublishTourRequest, opts ...grpc.CallOption) (*PublishTourResponse, error)
	ArchiveTour(ctx context.Context, in *ArchiveTourRequest, opts ...grpc.CallOption) (*ArchiveTourResponse, error)
}

type tourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourServiceClient(cc grpc.ClientConnInterface) TourServiceClient {
	return &tourServiceClient{cc}
}

func (c *tourServiceClient) FindTour(ctx context.Context, in *FindTourRequest, opts ...grpc.CallOption) (*TourDto, error) {
	out := new(TourDto)
	err := c.cc.Invoke(ctx, TourService_FindTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) FindTourByAuthorId(ctx context.Context, in *FindByAuthorIdRequest, opts ...grpc.CallOption) (*FindByAuthorIdResponse, error) {
	out := new(FindByAuthorIdResponse)
	err := c.cc.Invoke(ctx, TourService_FindTourByAuthorId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) CreateTour(ctx context.Context, in *TourDto, opts ...grpc.CallOption) (*TourDto, error) {
	out := new(TourDto)
	err := c.cc.Invoke(ctx, TourService_CreateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateTour(ctx context.Context, in *TourDto, opts ...grpc.CallOption) (*TourDto, error) {
	out := new(TourDto)
	err := c.cc.Invoke(ctx, TourService_UpdateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) PublishTour(ctx context.Context, in *PublishTourRequest, opts ...grpc.CallOption) (*PublishTourResponse, error) {
	out := new(PublishTourResponse)
	err := c.cc.Invoke(ctx, TourService_PublishTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) ArchiveTour(ctx context.Context, in *ArchiveTourRequest, opts ...grpc.CallOption) (*ArchiveTourResponse, error) {
	out := new(ArchiveTourResponse)
	err := c.cc.Invoke(ctx, TourService_ArchiveTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourServiceServer is the server API for TourService service.
// All implementations must embed UnimplementedTourServiceServer
// for forward compatibility
type TourServiceServer interface {
	FindTour(context.Context, *FindTourRequest) (*TourDto, error)
	FindTourByAuthorId(context.Context, *FindByAuthorIdRequest) (*FindByAuthorIdResponse, error)
	CreateTour(context.Context, *TourDto) (*TourDto, error)
	UpdateTour(context.Context, *TourDto) (*TourDto, error)
	PublishTour(context.Context, *PublishTourRequest) (*PublishTourResponse, error)
	ArchiveTour(context.Context, *ArchiveTourRequest) (*ArchiveTourResponse, error)
	mustEmbedUnimplementedTourServiceServer()
}

// UnimplementedTourServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTourServiceServer struct {
}

func (UnimplementedTourServiceServer) FindTour(context.Context, *FindTourRequest) (*TourDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTour not implemented")
}
func (UnimplementedTourServiceServer) FindTourByAuthorId(context.Context, *FindByAuthorIdRequest) (*FindByAuthorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTourByAuthorId not implemented")
}
func (UnimplementedTourServiceServer) CreateTour(context.Context, *TourDto) (*TourDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTour not implemented")
}
func (UnimplementedTourServiceServer) UpdateTour(context.Context, *TourDto) (*TourDto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTour not implemented")
}
func (UnimplementedTourServiceServer) PublishTour(context.Context, *PublishTourRequest) (*PublishTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTour not implemented")
}
func (UnimplementedTourServiceServer) ArchiveTour(context.Context, *ArchiveTourRequest) (*ArchiveTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveTour not implemented")
}
func (UnimplementedTourServiceServer) mustEmbedUnimplementedTourServiceServer() {}

// UnsafeTourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourServiceServer will
// result in compilation errors.
type UnsafeTourServiceServer interface {
	mustEmbedUnimplementedTourServiceServer()
}

func RegisterTourServiceServer(s grpc.ServiceRegistrar, srv TourServiceServer) {
	s.RegisterService(&TourService_ServiceDesc, srv)
}

func _TourService_FindTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).FindTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_FindTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).FindTour(ctx, req.(*FindTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_FindTourByAuthorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByAuthorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).FindTourByAuthorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_FindTourByAuthorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).FindTourByAuthorId(ctx, req.(*FindByAuthorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_CreateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).CreateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_CreateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).CreateTour(ctx, req.(*TourDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateTour(ctx, req.(*TourDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_PublishTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).PublishTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_PublishTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).PublishTour(ctx, req.(*PublishTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_ArchiveTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).ArchiveTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_ArchiveTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).ArchiveTour(ctx, req.(*ArchiveTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TourService_ServiceDesc is the grpc.ServiceDesc for TourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TourService",
	HandlerType: (*TourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTour",
			Handler:    _TourService_FindTour_Handler,
		},
		{
			MethodName: "FindTourByAuthorId",
			Handler:    _TourService_FindTourByAuthorId_Handler,
		},
		{
			MethodName: "CreateTour",
			Handler:    _TourService_CreateTour_Handler,
		},
		{
			MethodName: "UpdateTour",
			Handler:    _TourService_UpdateTour_Handler,
		},
		{
			MethodName: "PublishTour",
			Handler:    _TourService_PublishTour_Handler,
		},
		{
			MethodName: "ArchiveTour",
			Handler:    _TourService_ArchiveTour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tour_service.proto",
}
